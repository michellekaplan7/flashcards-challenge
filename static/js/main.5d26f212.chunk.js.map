{"version":3,"sources":["features/categorySlice.js","assets/images/lightning.svg","components/Header/Header.js","components/CategoryBtn/CategoryBtn.js","components/CategorySelection/CategorySelection.js","components/Card/Card.js","features/userSlice.js","components/UserBank/UserBank.js","features/cluesSlice.js","components/CardsContainer/CardsContainer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["getCategories","createAsyncThunk","a","count","dispatch","getState","randomOffSet","Math","floor","random","fetch","then","res","json","categorySlice","createSlice","name","initialState","list","status","currentCategory","reducers","selectCategory","state","action","payload","resetCategory","extraReducers","pending","fulfilled","rejected","selectCategoriesList","categories","actions","Header","className","alt","src","lightning","CategoryBtn","category","setCategoryChoice","onClick","title","CategorySelection","useState","categoryChoice","useDispatch","categoryBtns","map","i","id","Card","question","answer","value","disabled","setDisabled","type","htmlFor","userSlice","answers","correctAnswers","incorrectAnswers","bank","userSelectCorrectAnswer","push","userSelectIncorrectAnswer","increaseUserBank","decreaseUserBank","resetUser","userInfo","bankAmount","UserBank","useSelector","getClues","cluesSlice","resetClues","clue","categoryID","category_id","clues","cluesStatus","CardsContainer","cluesList","correctAmtOfAnswers","length","totalAmountOfQuestions","percentageCorrect","cluesLoadingStatus","currentCategorySelected","deck","setDeck","userAnswerSelection","setUserAnswerSelection","useEffect","arr","temporaryValue","randomIndex","array","JSON","parse","stringify","currentIndex","shuffle","slice","flashcards","card","splice","App","selected","categoriesStatus","configureStore","reducer","categoryReducer","cluesReducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d26f212.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getCategories = createAsyncThunk(\n  \"categories/getCategories\",\n  async ({ count }, { dispatch, getState }) => {\n    let randomOffSet = Math.floor(Math.random() * 100);\n\n    return fetch(\n      `http://jservice.io/api/categories?offset=${randomOffSet}&count=${count}`\n    ).then((res) => res.json());\n  }\n);\n\nconst categorySlice = createSlice({\n  name: \"categories\",\n  initialState: {\n    list: [],\n    status: null,\n    currentCategory: null,\n  },\n  reducers: {\n    selectCategory(state, action) {\n      state.currentCategory = action.payload;\n    },\n    resetCategory(state, action) {\n      state.list = [];\n      state.status = null;\n      state.currentCategory = null;\n    },\n  },\n\n  extraReducers: {\n    [getCategories.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getCategories.fulfilled]: (state, { payload }) => {\n      state.list = payload;\n      state.status = \"success\";\n    },\n    [getCategories.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\nexport default categorySlice.reducer;\n\nexport const selectCategoriesList = (state) => state.categories.list;\n\nexport const currentCategory = (state) => state.categories.currentCategory;\n\nexport const { selectCategory, resetCategory } = categorySlice.actions;\n","export default __webpack_public_path__ + \"static/media/lightning.ca60f863.svg\";","import React from \"react\";\nimport \"./Header.css\";\n\nimport lightning from \"../../assets/images/lightning.svg\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <img alt=\"lightning-bolt\" className=\"lightning\" src={lightning} />\n      <span>Flashcards</span>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst CategoryBtn = ({ category, setCategoryChoice }) => {\n  return (\n    <button onClick={() => setCategoryChoice(category)}>\n      {category.title}\n    </button>\n  );\n};\n\nexport default CategoryBtn;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport CategoryBtn from \"../CategoryBtn/CategoryBtn\";\n\nimport { selectCategory } from \"../../features/categorySlice\";\n\nimport \"./CategorySelection.css\";\n\nconst CategorySelection = ({ categories }) => {\n  const [categoryChoice, setCategoryChoice] = useState(null);\n  const dispatch = useDispatch();\n\n  const categoryBtns = categories.map((category, i) => {\n    return (\n      <CategoryBtn\n        key={i}\n        id={category.id}\n        category={category}\n        setCategoryChoice={setCategoryChoice}\n      />\n    );\n  });\n\n  return (\n    <div className=\"category-selection-container\">\n      <h2>Choose a category...</h2>\n      <div className=\"btn-container\">{categoryBtns}</div>\n\n      {categoryChoice && (\n        <button\n          onClick={() => dispatch(selectCategory(categoryChoice))}\n          className=\"next-btn\"\n        >\n          next\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default CategorySelection;\n","import React, { useState } from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ question, answer, value, category, id }) => {\n  const [disabled, setDisabled] = useState(false);\n\n  return (\n    <div className=\"card-container\">\n      <input\n        onClick={() => setDisabled(true)}\n        disabled={disabled}\n        type=\"checkbox\"\n        id={id}\n      />\n\n      <label className=\"card\" htmlFor={id}>\n        <div className=\"front\">\n          <p className=\"question-value\">value: {value}</p>\n          <p className=\"front-text\">{question}</p>\n          <p className=\"card-category\">{category}</p>\n\n          <div>\n            <p className=\"flip-text\">Click to flip</p>\n          </div>\n        </div>\n\n        <div className=\"back\">\n          <p className=\"back-text\">{answer}</p>\n        </div>\n      </label>\n    </div>\n  );\n};\n\nexport default Card;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n  name: \"userInfo\",\n  initialState: {\n    answers: {\n      correctAnswers: [],\n      incorrectAnswers: [],\n    },\n\n    bank: 0,\n  },\n  reducers: {\n    userSelectCorrectAnswer(state, { payload }) {\n      state.answers.correctAnswers.push(payload);\n    },\n    userSelectIncorrectAnswer(state, { payload }) {\n      state.answers.incorrectAnswers.push(payload);\n    },\n    increaseUserBank(state, action) {\n      state.bank += action.payload;\n    },\n    decreaseUserBank(state, action) {\n      state.bank -= action.payload;\n    },\n    resetUser(state, action) {\n      state.answers.correctAnswers = [];\n      state.answers.incorrectAnswers = [];\n      state.bank = 0;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n\nexport const correctAnswers = (state) => state.userInfo.answers.correctAnswers;\nexport const incorrectAnswers = (state) =>\n  state.userInfo.answers.incorrectAnswers;\nexport const bankAmount = (state) => state.userInfo.bank;\n\nexport const {\n  userSelectCorrectAnswer,\n  userSelectIncorrectAnswer,\n  increaseUserBank,\n  decreaseUserBank,\n  resetUser,\n} = userSlice.actions;\n","import React from \"react\";\nimport \"./UserBank.css\";\n\nimport { useSelector } from \"react-redux\";\n\nimport { bankAmount } from \"../../features/userSlice\";\n\nconst UserBank = () => {\n  const bank = useSelector(bankAmount);\n\n  return (\n    <div className=\"bank-container\">\n      <p>Bank</p>\n      <p>${bank}</p>\n    </div>\n  );\n};\n\nexport default UserBank;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getClues = createAsyncThunk(\n  \"clues/getClues\",\n  async (id, { dispatch, getState }) => {\n    return fetch(`http://jservice.io/api/clues?category=${id}`).then((res) =>\n      res.json()\n    );\n  }\n);\nconst cluesSlice = createSlice({\n  name: \"clues\",\n  initialState: {\n    list: [],\n    status: null,\n  },\n  reducers: {\n    resetClues(state, action) {\n      state.list = [];\n      state.status = null;\n    },\n  },\n  extraReducers: {\n    [getClues.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getClues.fulfilled]: (state, { payload }) => {\n      state.list = payload.map((clue) => {\n        return {\n          id: clue.id,\n          answer: clue.answer,\n          question: clue.question,\n          value: clue.value,\n          categoryID: clue.category_id,\n        };\n      });\n\n      state.status = \"success\";\n    },\n    [getClues.rejected]: (state, action) => {\n      state.status = \"failed\";\n    },\n  },\n});\n\nexport default cluesSlice.reducer;\n\nexport const clues = (state) => state.clues.list;\n\nexport const cluesStatus = (state) => state.clues.status;\n\nexport const { resetClues } = cluesSlice.actions;\n","import React, { useState, useEffect } from \"react\";\nimport \"./CardsContainer.css\";\nimport Card from \"../Card/Card\";\nimport UserBank from \"../UserBank/UserBank\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  clues,\n  getClues,\n  cluesStatus,\n  resetClues,\n} from \"../../features/cluesSlice\";\n\nimport { currentCategory, resetCategory } from \"../../features/categorySlice\";\n\nimport {\n  correctAnswers,\n  incorrectAnswers,\n  resetUser,\n} from \"../../features/userSlice\";\n\nimport {\n  userSelectCorrectAnswer,\n  userSelectIncorrectAnswer,\n  increaseUserBank,\n  decreaseUserBank,\n} from \"../../features/userSlice\";\n\nconst CardsContainer = () => {\n  const cluesList = useSelector(clues);\n  const correctAmtOfAnswers = useSelector(correctAnswers).length;\n  const incorrectAmtOfAnswers = useSelector(incorrectAnswers).length;\n  const totalAmountOfQuestions = correctAmtOfAnswers + incorrectAmtOfAnswers;\n  const percentageCorrect =\n    (correctAmtOfAnswers / totalAmountOfQuestions) * 100;\n\n  const cluesLoadingStatus = useSelector(cluesStatus);\n\n  const dispatch = useDispatch();\n  const currentCategorySelected = useSelector(currentCategory);\n  const [deck, setDeck] = useState([]);\n\n  const shuffle = (arr) => {\n    const array = JSON.parse(JSON.stringify(arr));\n\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  const [userAnswerSelection, setUserAnswerSelection] = useState(null);\n\n  const answerYes = () => setUserAnswerSelection(\"yes\");\n  const answerNo = () => setUserAnswerSelection(\"no\");\n\n  const answerSelectionHandler = () => {\n    if (userAnswerSelection === \"yes\") {\n      dispatch(userSelectCorrectAnswer(deck[deck.length - 1]));\n      dispatch(increaseUserBank(deck[deck.length - 1].value));\n      setUserAnswerSelection(null);\n    } else if (userAnswerSelection === \"no\") {\n      dispatch(userSelectIncorrectAnswer(deck[deck.length - 1]));\n      dispatch(decreaseUserBank(deck[deck.length - 1].value));\n      setUserAnswerSelection(null);\n    }\n\n    deck.splice(deck.length - 1, 1);\n    setDeck(deck);\n  };\n\n  const resetAll = () => {\n    dispatch(resetCategory());\n    dispatch(resetClues());\n    dispatch(resetUser());\n  };\n\n  useEffect(() => {\n    dispatch(getClues(currentCategorySelected.id));\n  }, [currentCategorySelected.id, dispatch]);\n\n  useEffect(() => {\n    setDeck(shuffle(cluesList).slice(0, 5));\n  }, [cluesList]);\n\n  useEffect(() => {}, [deck]);\n\n  const flashcards = deck.map((card, i) => {\n    return (\n      <Card\n        key={i}\n        id={i}\n        question={card.question}\n        answer={card.answer}\n        category={currentCategorySelected.title}\n        value={card.value}\n      />\n    );\n  });\n\n  return (\n    <>\n      <h3 className=\"selected-category-text\">\n        Your selected category is{\" \"}\n        <span>{`< ${currentCategorySelected.title} >`}</span>\n      </h3>\n      <div className=\"wrapper\">\n        {cluesLoadingStatus === \"loading\" ? (\n          <p className=\"loading\">Loading...</p>\n        ) : (\n          <div className=\"flashcards-container\">\n            {flashcards}\n            <UserBank />\n            {deck.length && (\n              <div className=\"user-answer-container\">\n                <h4>Did you get this question correct?</h4>\n\n                <button className=\"btn-answer-selection\" onClick={answerYes}>\n                  Yes\n                </button>\n                <button className=\"btn-answer-selection\" onClick={answerNo}>\n                  No\n                </button>\n              </div>\n            )}\n\n            {totalAmountOfQuestions === 5 && (\n              <>\n                <div className=\"summary-container\">\n                  <p>Game over!</p>\n                  <p>\n                    {`You answered ${correctAmtOfAnswers}/5 questions right for a score of ${percentageCorrect}% `}\n                  </p>\n                </div>\n                <button onClick={() => resetAll()} className=\"btn-start-over\">\n                  Start over!\n                </button>\n              </>\n            )}\n          </div>\n        )}\n\n        {userAnswerSelection && (\n          <button\n            onClick={() => answerSelectionHandler()}\n            className=\"btn-next-question\"\n          >\n            Next question\n          </button>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CardsContainer;\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectCategoriesList, getCategories } from \"./features/categorySlice\";\r\n\r\nimport { currentCategory } from \"./features/categorySlice\";\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./components/Header/Header\";\r\nimport CategorySelection from \"./components/CategorySelection/CategorySelection\";\r\nimport CardsContainer from \"./components/CardsContainer/CardsContainer\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const categories = useSelector(selectCategoriesList);\r\n  const selected = useSelector(currentCategory);\r\n\r\n  const categoriesStatus = useSelector((state) => state.categories.status);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategories({ count: 3 }));\r\n  }, [dispatch, selected]);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {categoriesStatus === \"loading\" ? (\r\n        <p className=\"loading\">Loading...</p>\r\n      ) : (\r\n        <div>\r\n          {!selected ? (\r\n            <CategorySelection categories={categories} />\r\n          ) : (\r\n            <>\r\n              <CardsContainer />\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport categoryReducer from \"../features/categorySlice\";\r\nimport cluesReducer from \"../features/cluesSlice\";\r\nimport userReducer from \"../features/userSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    categories: categoryReducer,\r\n    clues: cluesReducer,\r\n    userInfo: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}